area_km2
# Convert the frequency table to a data frame
ndvi_count_df <- as.data.frame(def_NDVI.freq)
# Rename columns for clarity
colnames(ndvi_count_df) <- c("NDVI", "Count")
# Merge count values with the statistics table
summary_stats <- merge(summary_stats, ndvi_count_df, by = "NDVI", all.x = TRUE)
install.packages(dplyer)
install.packages("dplyer")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
library(dplyr)
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
def_NDVI.freq <- freq(def_NDVI, useNA = "no")
res_l5 <-res(def_NDVI)
area_km2 <- def_NDVI.freq[, "count"] * prod(res_l5) / 1000000
area_km2
def_NDVI.freq <- freq(def_NDVI, useNA = "no")
def_NDVI.freq
res_l5 <-res(def_NDVI)
res_l5
30*30
0.03*0.03
(0.03*0.03)*1572
plot(def_NDVI)
RStoolbox::ggR(def_NDVI)
RStoolbox::ggR(def_NDVI, geom_raster = T)
def_NDVI
th_df_NDVI
plot(th_df_NDVI)
def_NDVI.freq <- freq(th_df_NDVI, useNA = "no")
def_NDVI.freq
res_l5 <-res(def_NDVI)
area_km2 <- def_NDVI.freq[, "count"] * prod(res_l5) / 1000000
area_km2
th_NDVI_2020_zone_sd <- zonal(ndvi_2020, th_df_NDVI, fun = sd)
th_NDVI_2020_zone_sd
th_NDVI_2020_zone_sd <- zonal(ndvi_2020, th_df_NDVI, fun = sd, as.raster = T)
plot(th_NDVI_2020_zone_sd)
th_NDVI_2020_zone_sd
th_NDVI_2020_zone_sd <- zonal(ndvi_2020, th_df_NDVI, fun = sd, as.raster = T)
th_NDVI_2020_zone_sd
ndvi_2020
th_df_NDVI
th_NDVI_2020_zone_sd <- terra::zonal(ndvi_2020, th_df_NDVI, fun = sd, as.raster = T)
th_NDVI_2020_zone_sd
th_NDVI_2020_zone_sd <- terra::zonal(as(ndvi_2020, "SpatRast"), as(th_df_NDVI, "SpatRast"), fun = sd, as.raster = T)
as(ndvi_2020, "SpatRast")
rast(ndvi_2020)
library(terra)
rast(ndvi_2020)
th_NDVI_2020_zone_sd <- terra::zonal(rast(ndvi_2020), rast(th_df_NDVI), fun = sd, as.raster = T)
th_NDVI_2020_zone_sd
plot(th_NDVI_2020_zone_sd)
th_NDVI_2020_zone_mean <- terra::zonal(rast(ndvi_2020), rast(th_df_NDVI), fun = mean, as.raster = T)
plot(th_NDVI_2020_zone_mean)
th_def_ndvi_zone_mean <- terra::zonal(rast(def_NDVI), rast(th_df_NDVI), fun = mean, as.raster = T)
plot(th_def_ndvi_zone_mean)
th_def_ndvi_zone_mean <- terra::zonal(rast(def_NDVI), rast(th_df_NDVI), fun = mean, as.raster = F)
th_def_ndvi_zone_mean
def_NDVI
th_df_NDVI
def_NDVI.freq
plot(th_df_NDVI)
# load polygons
labeled_poly <- st_read("C:/Users/raiya/OneDrive/Documents/loss analysis/samples2000.gpkg")
library(raster)
library(sp)
library(sf)
library(mapview)
library(RStoolbox)
library(caret)
library(randomForest)
library(reshape2)
library(ggplot2)
library(dplyr)
#Load dataset
dir <- ("C:Users/raiya/OneDrive/Documents/loss analysis")
setwd(dir)
#Load dataset
dir <- ("C:Users/raiya/OneDrive/Documents/loss analysis")
setwd(dir)
getwd()
set.seed(7)
#Load the dataset
r<-stack("C:/Users/raiya/OneDrive/Documents/loss analysis/LT05_L1TP_137044_20001102_20200906_02_T1_roi.tif")
bands <- c("B01", "B02", "B03",  "B04", "B05", "B06", "B07")
names(r) <- bands
# load polygons
labeled_poly <- st_read("C:/Users/raiya/OneDrive/Documents/loss analysis/samples2000.gpkg")
labeled_poly <- st_transform(labeled_poly, st_crs(r))
# what do you want to be your response variable? numeric!
labeled_poly$id
labeled_poly$resp_var <- labeled_poly$id
# we need labeled features for training:
# features = predictors (e.g. spectra)
# labels = response variable (e.g. classid, but could be continuous as well, e.g. species richness)
# to get labeled features, we need points to extract features for
# let's randomly select some points in our polygons and save there labels to them
labeled_points <- list()
for(i in unique(labeled_poly$resp_var)){
message(paste0("Sampling points from polygons with resp_var=", i))
# sample points for polygons of resp_var = i
labeled_points[[i]] <- st_sample(
x = labeled_poly[labeled_poly$resp_var == i,],
size = 100
)
labeled_points[[i]] <- st_as_sf(labeled_points[[i]])
labeled_points[[i]]$resp_var <- i
}
labeled_points <- do.call(rbind, labeled_points)
# now that we have points we need to extract features
# we can use our RS data for this since we do not have any ground-truth from site
#r <- normImage(r)
#r <- rescaleImage(r, ymin = 0, ymax = 1)
# extract features and label them with our response variable!
unlabeled_features <- raster::extract(r, labeled_points, df = T)
unlabeled_features <- unlabeled_features[,-1] # no ID column needed
labeled_features <- cbind(
resp_var = labeled_points$resp_var,
unlabeled_features
)
# remove duplicates (in case multiple points fall into the same pixel)
dupl <- duplicated(labeled_features)
which(dupl)
length(which(dupl)) # number of duplicates in labeled features that we need to remove!
labeled_features <- labeled_features[!dupl,]
# x = features
x <- labeled_features[,2:ncol(labeled_features)] # remove ID column
y <- as.factor(labeled_features$resp_var) #we want caret to treat this as categories, thus factor
levels(y) <- paste0("class_", levels(y))
# fit the model, here a ranodm Forest
model <- train(
x = x,
y = y,
trControl = trainControl(
p = 0.75, # percentage of samples used for training, rest for validation
method  = "cv", #cross validation
number  = 5, # 5-fold
verboseIter = TRUE, # progress update per iteration
classProbs = TRUE # probabilities for each example
),
#preProcess = c("center", "scale"), #center/scale if not done by you on the raster (see previous code rescl)
method = "rf" # used algorithm
)
# performance
model
confusionMatrix(model)
# predict
r_class <- predict(r, model, type='raw')
# write
writeRaster(r_class, filename = "C:/Users/raiya/OneDrive/Documents/loss analysis/LT05_L1TP_137044_20001102_20200906_02_T1_Landuse.tif", datatype = "INT1U")
writeRaster(forest_mask, filename = "C:/Users/raiya/OneDrive/Documents/loss analysis/LT05_L1TP_137044_20001102_20200906_02_T1_forest_mask.tif",datatype = "INT1U", overwrite = TRUE)
# write
writeRaster(r_class, filename = "C:/Users/raiya/OneDrive/Documents/loss analysis/LT05_L1TP_137044_20001102_20200906_02_T1_Landuse.tif", datatype = "INT1U", overwrite = TRUE)
cols <- c("darkgreen", "red", "grey", "tan","blue")
# map
mapview(r_class, col.regions = cols)
ggplot() + ggR(r_class, geom_raster = T, ggLayer = T) +
scale_fill_manual(values = cols,
name = "Land Use") +
coord_sf(crs = st_crs(r), datum = st_crs(32646))
landuse_2000 <- raster("C:/Users/raiya/OneDrive/Documents/loss analysis/LT05_L1TP_137044_20001102_20200906_02_T1_Landuse.tif")
#mask the forest
unique_values <- unique(values(landuse_2000))
print(unique_values)
forest_value <- 1
forest_mask <- landuse_2000 == forest_value
forest_mask <- as.integer(forest_mask)
writeRaster(forest_mask, filename = "C:/Users/raiya/OneDrive/Documents/loss analysis/LT05_L1TP_137044_20001102_20200906_02_T1_forest_mask.tif",datatype = "INT1U", overwrite = TRUE)
forest_color <- "green"
non_forest_color <- "white"
#Viewing forest mask
cols <- c("white", "green")
mapview(forest_mask, col.regions = cols)
#To check if we have nir and red band in forest mask
nlayers(vegetation_mask)
nir <- raster("C:/Users/raiya/OneDrive/Documents/loss analysis/nir.tif")
red <- raster("C:/Users/raiya/OneDrive/Documents/loss analysis/red.tif")
#To check the if images are in same extent
#extent <- extent(nir)
#extent <- extent(red)
#extent(forest_mask)
#forest mask extent resampling to match the extent to nir and red
#f_mask_extent <- resample(forest_mask, nir, method = 'bilinear' )
#masking the nir and red band using forest mask extent
forest_mask[forest_mask == 0] <- NA
nir_f_mask <- mask(nir,forest_mask)
red_f_mask <- mask(red,forest_mask)
#Calculating NDVI
ndvi_2000 <- (nir_f_mask -red_f_mask ) / (nir_f_mask + red_f_mask )
mapview(ndvi_2000)
writeRaster(ndvi_2000, filename = "C:/Users/raiya/OneDrive/Documents/forest loss/ndvi_2000.tif",datatype = "INT1U")
writeRaster(ndvi_2000, filename = "C:/Users/raiya/OneDrive/Documents/loss analysis/ndvi_2000.tif",datatype = "INT1U")
# Convert raster to data frame
ndvi_df_2000 <- as.data.frame(ndvi_2000, xy = TRUE)
# Plot NDVI using ggplot2
ggplot(ndvi_df_2000) +
geom_raster(aes(x = x, y = y, fill = layer)) +
scale_fill_gradientn(colors = c("white", "darkgreen"),
breaks = c(-1, 1),
labels = c("Low", "High"),
limits = c(-1, 1)) +
labs(title = "Vegetation Areas NDVI 2000",
fill = "NDVI") +
theme_minimal()
#Calculate ndvi for landsat 8 data for year 2020
ls_2020 <- stack("C:/Users/raiya/OneDrive/Documents/loss analysis/roi 2020.tif")
ndvi_ls_2020 <- (ls_2020[[5]]-ls_2020[[4]])/(ls_2020[[5]]+ls_2020[[4]])
#Overlaying to forest mask to only get the ndvi values for forested areas
ndvi_2020 <- overlay(ndvi_ls_2020, forest_mask, fun = "*")
plot(ndvi_2020)
# Convert raster to data frame
ndvi_df_2020 <- as.data.frame(ndvi_2020, xy = TRUE)
# Plot NDVI using ggplot2
ggplot(ndvi_df_2020) +
geom_raster(aes(x = x, y = y, fill = layer)) +
scale_fill_gradientn(colors = c("white", "darkgreen"),
breaks = c(-1, 1),
labels = c("Low", "High"),
limits = c(-1, 1)) +
labs(title = "Vegetation Areas NDVI 2020",
fill = "NDVI") +
theme_minimal()
def_NDVI <- ndvi_2020 - ndvi_2000
plot(def_NDVI)
th_df_NDVI <- def_NDVI < -0.2
mapview(th_df_NDVI)
# Convert raster to data frame
def_NDVI_df <- as.data.frame(def_NDVI, xy = TRUE)
hist(def_NDVI)
# Plot NDVI using ggplot2
ggplot(def_NDVI_df) +
geom_raster(aes(x = x, y = y, fill = layer)) +
scale_fill_gradientn(colors = c("white", "darkgreen"),
breaks = c(-1, 1),
labels = c("Low", "High"),
limits = c(-1, 1)) +
labs(title = "NDVI difference",
fill = "NDVI") +
theme_minimal()
def_NDVI.freq <- freq(th_df_NDVI, useNA = "no")
res_l5 <-res(def_NDVI)
area_km2 <- def_NDVI.freq[, "count"] * prod(res_l5) / 1000000
th_def_ndvi_zone_mean <- terra::zonal(rast(def_NDVI), rast(th_df_NDVI), fun = mean, as.raster = F)
plot(th_def_ndvi_zone_mean)
def_NDVI.freq <- freq(def_NDVI, useNA = "no")
res_l5 <-res(def_NDVI)
area_km2 <- def_NDVI.freq[, "count"] * prod(res_l5) / 1000000
ggplot(ndvi_df_2020) +
geom_raster(aes(x = x, y = y, fill = layer)) +
scale_fill_gradientn(colors = c("white", "darkgreen"),
breaks = c(-1, 1),
labels = c("Low", "High"),
limits = c(-1, 1)) +
labs(title = "Vegetation Areas NDVI 2020",
fill = "NDVI") +
theme_minimal()
plot(ndvi_2020)
plot(ndvi_2000)
plot(ndvi_2020)
def_NDVI
plot(def_NDVI)
plot(def_NDVI)
th_df_NDVI <- def_NDVI < -0.2
mapview(th_df_NDVI)
hist(def_NDVI)
def_NDVI.freq <- freq(th_df_NDVI, useNA = "no")
res_l5 <-res(def_NDVI)
area_km2 <- def_NDVI.freq[, "count"] * prod(res_l5) / 1000000
area_km2
def_NDVI.freq
th_df_NDVI
th_df_NDVI <- def_NDVI < -0.5
mapview(th_df_NDVI)
# Convert raster to data frame
def_NDVI_df <- as.data.frame(def_NDVI, xy = TRUE)
hist(def_NDVI)
def_NDVI.freq <- freq(th_df_NDVI, useNA = "no")
res_l5 <-res(def_NDVI)
area_km2 <- def_NDVI.freq[, "count"] * prod(res_l5) / 1000000
def_NDVI.freq
area_km2
th_def_ndvi_zone_mean <- terra::zonal(rast(def_NDVI), rast(th_df_NDVI), fun = mean, as.raster = F)
plot(th_def_ndvi_zone_mean)
th_def_ndvi_zone_mean <- terra::zonal(rast(def_NDVI), rast(th_df_NDVI), fun = mean, as.raster = F)
plot(th_def_ndvi_zone_mean)
def_NDVI.freq <- freq(th_df_NDVI, useNA = "no")
res_ls <-res(def_NDVI)
area_km2 <- def_NDVI.freq[, "count"] * prod(res_ls) / 1000000
th_def_ndvi_zone_mean <- terra::zonal(rast(def_NDVI), rast(th_df_NDVI), fun = mean, as.raster = T)
plot(th_def_ndvi_zone_mean)
th_df_NDVI <- def_NDVI < -0.1
mapview(th_df_NDVI)
# Convert raster to data frame
def_NDVI_df <- as.data.frame(def_NDVI, xy = TRUE)
hist(def_NDVI)
# Plot NDVI using ggplot2
ggplot(def_NDVI_df) +
geom_raster(aes(x = x, y = y, fill = layer)) +
scale_fill_gradientn(colors = c("white", "darkgreen"),
breaks = c(-1, 1),
labels = c("Low", "High"),
limits = c(-1, 1)) +
labs(title = "NDVI difference",
fill = "NDVI") +
theme_minimal()
def_NDVI.freq <- freq(th_df_NDVI, useNA = "no")
res_ls <-res(def_NDVI)
area_km2 <- def_NDVI.freq[, "count"] * prod(res_ls) / 1000000
th_def_ndvi_zone_mean <- terra::zonal(rast(def_NDVI), rast(th_df_NDVI), fun = mean, as.raster = T)
plot(th_def_ndvi_zone_mean)
th_df_NDVI <- def_NDVI < -0.1
mapview(th_df_NDVI)
th_df_NDVI <- def_NDVI > -0.1
mapview(th_df_NDVI)
th_df_NDVI <- def_NDVI < -0.1
mapview(th_df_NDVI)
ef_NDVI <- ndvi_2020 - ndvi_2000
plot(def_NDVI)
th_df_NDVI <- def_NDVI < -0.2
mapview(th_df_NDVI)
# Convert raster to data frame
def_NDVI_df <- as.data.frame(def_NDVI, xy = TRUE)
hist(def_NDVI)
# Plot NDVI using ggplot2
ggplot(def_NDVI_df) +
geom_raster(aes(x = x, y = y, fill = layer)) +
scale_fill_gradientn(colors = c("white", "darkgreen"),
breaks = c(-1, 1),
labels = c("Low", "High"),
limits = c(-1, 1)) +
labs(title = "NDVI difference",
fill = "NDVI") +
theme_minimal()
def_NDVI.freq <- freq(th_df_NDVI, useNA = "no")
res_ls <-res(def_NDVI)
area_km2 <- def_NDVI.freq[, "count"] * prod(res_ls) / 1000000
th_def_ndvi_zone_mean <- terra::zonal(rast(def_NDVI), rast(th_df_NDVI), fun = mean, as.raster = T)
plot(th_def_ndvi_zone_mean)
th_df_NDVI <- def_NDVI < -0.2
mapview(th_df_NDVI)
def_NDVI
th_df_NDVI
def_NDVI
# Example NDVI raster data
def_NDVI <- matrix(c(-0.70, -0.30, 0.20, 0.60, 1.00), nrow = 1)
# Thresholding logic
threshold <- -0.1
thresholded_ndvi <-def_NDVI < threshold
thresholded_ndvi
# Display thresholded NDVI
print(thresholded_ndvi)
plot(thresholded_ndvi)
plot(thresholded_ndvi)
plot(thresholded_ndvi, main = "Thresholded NDVI", col = c("blue", "red"), legend = FALSE)
plot(thresholded_ndvi, main = "Thresholded NDVI", col = c("blue", "red"))
plot(thresholded_ndvi, main = "Thresholded NDVI", col = c("blue", "red"))
# Example NDVI raster data
def_NDVI <- matrix(c(-0.70, -0.30, 0.20, 0.60, 1.00), nrow = 1)
th_df_NDVI <- def_NDVI < -0.2
mapview(th_df_NDVI)
plot(th_df_NDVI)
th_df_NDVI <- def_NDVI < -0.2
plot(th_df_NDVI)
mapview(th_df_NDVI)
th_df_NDVI <- def_NDVI < -0.2
plot(th_df_NDVI)
def_NDVI <- ndvi_2020 - ndvi_2000
plot(def_NDVI)
th_df_NDVI <- def_NDVI < -0.2
plot(th_df_NDVI)
#Load the dataset
ls_2000<-stack("C:/Users/raiya/OneDrive/Documents/loss analysis/LT05_L1TP_137044_20001102_20200906_02_T1_roi.tif")
bands <- c("B01", "B02", "B03",  "B04", "B05", "B06", "B07")
names(ls_2000) <- bands
# load polygons
labeled_poly <- st_read("C:/Users/raiya/OneDrive/Documents/loss analysis/samples2000.gpkg")
labeled_poly <- st_transform(labeled_poly, st_crs(r))
# what do you want to be your response variable? numeric!
labeled_poly$id
labeled_poly$resp_var <- labeled_poly$id
# we need labeled features for training:
# features = predictors (e.g. spectra)
# labels = response variable (e.g. classid, but could be continuous as well, e.g. species richness)
# to get labeled features, we need points to extract features for
# let's randomly select some points in our polygons and save there labels to them
labeled_points <- list()
for(i in unique(labeled_poly$resp_var)){
message(paste0("Sampling points from polygons with resp_var=", i))
# sample points for polygons of resp_var = i
labeled_points[[i]] <- st_sample(
x = labeled_poly[labeled_poly$resp_var == i,],
size = 100
)
labeled_points[[i]] <- st_as_sf(labeled_points[[i]])
labeled_points[[i]]$resp_var <- i
}
labeled_points <- do.call(rbind, labeled_points)
# now that we have points we need to extract features
# we can use our RS data for this since we do not have any ground-truth from site
#r <- normImage(r)
#r <- rescaleImage(r, ymin = 0, ymax = 1)
# extract features and label them with our response variable!
unlabeled_features <- raster::extract(r, labeled_points, df = T)
unlabeled_features <- unlabeled_features[,-1] # no ID column needed
labeled_features <- cbind(
resp_var = labeled_points$resp_var,
unlabeled_features
)
# remove duplicates (in case multiple points fall into the same pixel)
dupl <- duplicated(labeled_features)
which(dupl)
length(which(dupl)) # number of duplicates in labeled features that we need to remove!
labeled_features <- labeled_features[!dupl,]
# x = features
x <- labeled_features[,2:ncol(labeled_features)] # remove ID column
y <- as.factor(labeled_features$resp_var) #we want caret to treat this as categories, thus factor
levels(y) <- paste0("class_", levels(y))
# fit the model, here a ranodm Forest
model <- train(
x = x,
y = y,
trControl = trainControl(
p = 0.75, # percentage of samples used for training, rest for validation
method  = "cv", #cross validation
number  = 5, # 5-fold
verboseIter = TRUE, # progress update per iteration
classProbs = TRUE # probabilities for each example
),
#preProcess = c("center", "scale"), #center/scale if not done by you on the raster (see previous code rescl)
method = "rf" # used algorithm
)
# performance
model
confusionMatrix(model)
# predict
ls_2000_class <- predict(ls_2000, model, type='raw')
# write
writeRaster(ls_2000_class, filename = "C:/Users/raiya/OneDrive/Documents/loss analysis/LT05_L1TP_137044_20001102_20200906_02_T1_Landuse.tif", datatype = "INT1U", overwrite = TRUE)
cols <- c("darkgreen", "red", "grey", "tan","blue")
# map
mapview(ls_2000_class, col.regions = cols)
landuse_2000 <- raster("C:/Users/raiya/OneDrive/Documents/loss analysis/LT05_L1TP_137044_20001102_20200906_02_T1_Landuse.tif")
#mask the forest
unique_values <- unique(values(landuse_2000))
print(unique_values)
forest_value <- 1
forest_mask <- landuse_2000 == forest_value
forest_mask <- as.integer(forest_mask)
writeRaster(forest_mask, filename = "C:/Users/raiya/OneDrive/Documents/loss analysis/LT05_L1TP_137044_20001102_20200906_02_T1_forest_mask.tif",datatype = "INT1U", overwrite = TRUE)
forest_color <- "green"
non_forest_color <- "white"
#Viewing forest mask
cols <- c("white", "green")
mapview(forest_mask, col.regions = cols)
#To check if we have nir and red band in forest mask
nlayers(vegetation_mask)
nir <- raster("C:/Users/raiya/OneDrive/Documents/loss analysis/nir.tif")
red <- raster("C:/Users/raiya/OneDrive/Documents/loss analysis/red.tif")
#To check the if images are in same extent
#extent <- extent(nir)
#extent <- extent(red)
#extent(forest_mask)
#forest mask extent resampling to match the extent to nir and red
#f_mask_extent <- resample(forest_mask, nir, method = 'bilinear' )
#masking the nir and red band using forest mask extent
forest_mask[forest_mask == 0] <- NA
nir_f_mask <- mask(nir,forest_mask)
red_f_mask <- mask(red,forest_mask)
#Calculating NDVI
ndvi_2000 <- (nir_f_mask -red_f_mask ) / (nir_f_mask + red_f_mask )
plot(ndvi_2000)
mapview(ndvi_2000)
writeRaster(ndvi_2000, filename = "C:/Users/raiya/OneDrive/Documents/loss analysis/ndvi_2000.tif",datatype = "INT1U")
#Spectral Change Vector Analaysis
tc_2000 <- tasseledCap(dropLayer(ls_2000,"B6_bt"), sat = Landsat5TM)
#Spectral Change Vector Analaysis
tc_2000 <- tasseledCap(dropLayer(ls_2000,"B6_bt"), sat = "Landsat5TM")
#Spectral Change Vector Analaysis
tc_2000 <- tasseledCap(dropLayer(ls_2000,"B6_bt"), sat = "Landsat5TM")
#Spectral Change Vector Analaysis
tc_2000 <- tasseledCap(ls_2000 [c(1:7)], sat = "Landsat5TM")
ls_2000
#Spectral Change Vector Analaysis
tc_2000 <- tasseledCap(dropLayer(ls_2000, "B06_bt") , sat = "Landsat5TM")
#Spectral Change Vector Analaysis
tc_2000 <- tasseledCap(dropLayer(ls_2000, "B06_bt") , sat = "Landsat5TM")
tc_2020 <- tasseledCap(dropLayer(ls_2020, "B06_bt"), sat = "Landsat8OLI")
roxygen2::roxygenize()
install.packages("~/ForestChangeDetection/forchange_0.1.0.tar.gz", repos = NULL, type = "source")
library(forchange)
setwd("C:/Users/raiya/OneDrive/Documents/ForestChangeDetection/forchange_0.1.0/forchange")
getwd()
